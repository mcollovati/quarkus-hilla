name: 'run-validation'
description: 'Build and test'
inputs:
  ref:
    description: >
      The branch, tag or SHA to checkout. Defaults to github.ref.
    required: true
    default: ${{ github.ref }}
  original_ref:
    description: >
      The branch, tag or SHA to checkout after the build completes. Defaults to github.ref.
    default: ${{ github.ref }}
  java_version:
    description: 'Java version'
    required: true
  hilla_version:
    description: 'Hilla version'
    required: true
  skip_vaadin_version_detection:
    description: 'Skips Vaadin platform version detection'
    default: 'false'
  skip_install_chrome:
    description: 'Install chrome'
    default: 'false'
runs:
  using: composite
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.ref }}
        fetch-depth: 0
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ inputs.java_version }}
        distribution: 'temurin'
        cache: maven
    - uses: browser-actions/setup-chrome@latest
      id: setup-chrome
      if: ${{ inputs.install_chrome == 'true' }}
      with:
        chrome-version: stable
    - name: Build
      shell: bash
      run: |
        set -x -e -o pipefail
        if [[ "${{ inputs.hilla_version }}" != "main-SNAPSHOT" ]]; then
          mvn -B -N -ntp versions:set-property -Dproperty=hilla.version -DnewVersion=${{ inputs.hilla_version }} -DgenerateBackupPoms=false
        fi
        if [[ "${{ inputs.skip_vaadin_version_detection }}" == "false" ]]; then
          vaadin_version=$(mvn -ntp -N -Pdetect-vaadin-platform -q)-SNAPSHOT
          hilla_version=$(mvn -ntp -N -q help:evaluate -Dexpression=hilla.version -DforceStdout)
          mvn -B -ntp versions:set-property -Dproperty=vaadin.version -DnewVersion=$vaadin_version -DgenerateBackupPoms=false -Pit-tests
          echo "Running Validation for Hilla $hilla_version and Vaadin $vaadin_version ">> "$GITHUB_STEP_SUMMARY"
        fi
        mvn -V -e -B -ntp -DskipTests -Dmaven.javadoc.skip=false install
    - name: Test
      shell: bash
      run: |
        set -x -e -o pipefail
        mvn -V -e -B -ntp verify -Dmaven.javadoc.skip=false -DtrimStackTrace=false
    - name: End-to-end Tests (Development mode)
      shell: bash
      run: |
        set -x -e -o pipefail
        mvn -V -e -B -ntp verify -Dmaven.javadoc.skip=false -DtrimStackTrace=false -Pit-tests,snapshot-validation -Dselenide.browserBinary=${{ steps.setup-chrome.outputs.chrome-path }}
    - name: End-to-end Tests (Production mode)
      shell: bash
      run: |
        set -x -e -o pipefail
        mvn -V -e -B -ntp verify -Dmaven.javadoc.skip=false -DtrimStackTrace=false -Pit-tests,production,snapshot-validation -Dselenide.browserBinary=${{ steps.setup-chrome.outputs.chrome-path }}
    - name: Package test output files
      if: ${{ failure()}}
      shell: bash
      run: find . -name surefire-reports -name failsafe-reports -o -name failsafe-reports -o -name selenide-reports | tar -czf tests-report-${{ inputs.ref }}-${{ inputs.hilla_version }}-JVM-${{ inputs.java_version }}.tgz -T -
    - uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: tests-output-${{ inputs.ref }}-${{ inputs.hilla_version }}-JVM-${{ inputs.java_version }}
        path: tests-report-*.tgz
    - name: Checkout
      uses: actions/checkout@v4
      if: ${{ always() }}
      with:
        ref: ${{ inputs.original_ref }}
        fetch-depth: 0
