name: Formatting check
on:
  pull_request_target:
    types: [opened, synchronize, reopened, edited]
permissions:
  contents: read
  issues: read
concurrency:
  group: format-check-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true
env:
  JAVA_VERSION: 17
  HEAD_REF: ${{ github.head_ref }}
  REF_NAME: ${{ github.ref_name }}
  HEAD_SHA: ${{ github.event.pull_request.head.sha }}
jobs:
  checkstyle:
    permissions:
      checks: write
      pull-requests: write
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - run: echo "Concurrency Group = format-check-${HEAD_REF:-$REF_NAME}"
      - uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        id: generate-token
        with:
          app_id: ${{ secrets.QUARKUS_HILLA_BOT_ID }}
          private_key: ${{ secrets.QUARKUS_HILLA_BOT_PRIVATE_KEY }}
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{env.HEAD_SHA}}
      - name: Set up Java
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven
      - name: Check
        id: spotlessCheck
        run: |
          set -x -e -o pipefail
          mvn -V -e -B -ntp -Pall-modules spotless:check
      - name: Prepare failure message
        if: ${{ failure() && steps.spotlessCheck.conclusion == 'failure' }}
        run: |
          set -x -e -o pipefail
          mvn -V -e -B -ntp -Pall-modules spotless:apply
          git diff --output=/tmp/full-diff.txt
          git diff --name-only --output=/tmp/unformatted.txt
          export _UNFORMATTED_COUNT=$(cat /tmp/unformatted.txt | wc -l)
          export _UNFORMATTED_FILES=$(cat /tmp/unformatted.txt)
          export _FULL_DIFF=$(cat /tmp/full-diff.txt)
          envsubst < ./.github/scripts/format-check-report.tpl.md > /tmp/message
      - name: Prepare success message
        if: ${{ success() }}
        run: |
          set -x -e -o pipefail
          echo "# Format Checker Report" >> /tmp/message
          echo "" >> /tmp/message
          echo "All files are correctly formatted" >> /tmp/message
      - name: Comment PR
        if: ${{ always() }}
        uses: thollander/actions-comment-pull-request@fabd468d3a1a0b97feee5f6b9e499eab0dd903f6 # v2.5.0
        with:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
          filePath: /tmp/message
          comment_tag: formatting-check
      - name: Add format required label to PR
        if: ${{ failure() && steps.spotlessCheck.conclusion == 'failure' }}
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;

            // Remove the label if it exists
            const existingLabels = await github.rest.issues.listLabelsOnIssue({
              owner,
              repo,
              issue_number: prNumber,
            }).then(resp => resp.data.map(label => label.name));

            if (existingLabels.includes("format:checked")) {
              await github.rest.issues.removeLabel({
                owner,
                repo,
                issue_number: prNumber,
                name: "format:checked",
              });
            }

            if (!existingLabels.includes("format:required")) {
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: prNumber,
                labels: ['format:required'],
              });
            }
      - name: Add format checked label to PR
        if: ${{ success() }}
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;

            // Remove the label if it exists
            const existingLabels = await github.rest.issues.listLabelsOnIssue({
              owner,
              repo,
              issue_number: prNumber,
            }).then(resp => resp.data.map(label => label.name));

            if (existingLabels.includes("format:required")) {
              await github.rest.issues.removeLabel({
                owner,
                repo,
                issue_number: prNumber,
                name: "format:required",
              });
            }

            if (!existingLabels.includes("format:checked")) {
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: prNumber,
                labels: ['format:checked'],
              });
            }
