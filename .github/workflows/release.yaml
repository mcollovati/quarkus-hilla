name: Release
on:
  workflow_dispatch:
    inputs:
      target-branch:
        description: "Branch to release"
        required: true
        type: choice
        default: 'main'
        options:
        - main
      version:
        description: "Version to release (e.g. 1.1.0 or 1.2.0.alpha1)"
        required: true
        type: string
      dry-run:
        description: "Dry run (Skips remote operations)"
        required: true
        type: boolean
        default: false
jobs:
  release:
    name: Release
    runs-on: ubuntu-latest

    steps:
      - name: Validate Workflow branch
        run: |
          BRANCH_NAME=${GITHUB_REF##*/}
          if [[ "main" != "${BRANCH_NAME}" ]]; then
            echo "ERROR: Release Workflow must be dispatched on 'main' branch."
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: refs/heads/${{ inputs.target-branch }}
          fetch-depth: 0

      - name: Validate version
        run: |
          VERSION_REGEX='^[0-9]+\.[0-9]+\.[0-9]+(\.(alpha|beta|rc)[0-9]+)?$'
          if [[ ! "${{ inputs.version }}" =~ $VERSION_REGEX ]]; then
            echo "ERROR: Invalid version specified: '${{ inputs.version }}'. Please enter a valid SemVer version, like '1.2.3' or '1.0.0.alpha1'."
            exit 1
          fi
          if git rev-parse -q --verify "refs/tags/${{ inputs.version }}" >/dev/null; then
            echo "Version ${{ inputs.version }} already exists. Please choose a different version."
            exit 1
          fi

#      - name: Check Branch
#        run: |
#          ALLOWED_BRANCHES=("main" "1.0" "2.0")
#          BRANCH_NAME=${GITHUB_REF##*/}
#          if [[ ! " ${ALLOWED_BRANCHES[@]} " =~ " ${BRANCH_NAME} " ]]; then
#            echo "ERROR: Branch ${GITHUB_REF} is not allowed. Only branches $(IFS=,; echo "${ALLOWED_BRANCHES[*]}") are allowed."
#            exit 1
#          fi

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Staging artifacts
        run: |
          mvn -V -ntp -Pdistribution -Drevision=${{ inputs.version }} -DaltDeploymentRepository=local::file:./target/staging-deploy deploy 

      - name: Run JReleaser
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_DEPLOY_MAVEN_ARTIFACTORY_TOKEN: ${{ secrets.JFROG_TOKEN }}
          JRELEASER_NEXUS2_MAVEN_CENTRAL_USERNAME: ${{ secrets.JRELEASER_NEXUS2_MAVEN_CENTRAL_USERNAME }}
          JRELEASER_NEXUS2_MAVEN_CENTRAL_PASSWORD: ${{ secrets.JRELEASER_NEXUS2_MAVEN_CENTRAL_PASSWORD }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.JRELEASER_GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.JRELEASER_GPG_SECRET_KEY }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}
        run: |
          mvn -N -V -ntp -Pdistribution -Drevision=${{ inputs.version }} -Djreleaser.dry.run="${{ github.event.inputs.dry-run }}" jreleaser:full-release 

      - name: JReleaser release output
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: jreleaser-release
          path: |
            target/jreleaser/trace.log
            target/jreleaser/output.properties